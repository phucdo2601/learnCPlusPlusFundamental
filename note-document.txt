- what is const in c++?

In C++, const is a keyword that stands for "constant." It is used to define variables, pointers, member functions, and objects that are immutable or constant. Here's a detailed breakdown of its various uses:

Constant Variables:

cpp
Copy code
const int x = 10;
x is a constant integer, and its value cannot be changed after initialization.
Constant Pointers:

Pointer to a constant value:

cpp
Copy code
const int *ptr = &x;
Here, ptr is a pointer to a constant integer. The value being pointed to cannot be changed, but the pointer itself can point to a different address.

Constant pointer to a value:

cpp
Copy code
int *const ptr = &x;
In this case, ptr is a constant pointer to an integer. The pointer must always point to the same address, but the value at that address can be modified.

Constant pointer to a constant value:

cpp
Copy code
const int *const ptr = &x;
Here, ptr is a constant pointer to a constant integer. Neither the address the pointer holds nor the value at that address can be changed.

Constant Member Functions
Member functions can be marked as const to indicate that they do not modify the state of the object.

cpp
Copy code
class MyClass {
public:
    int getValue() const {
        return value;
    }
private:
    int value;
};
getValue is a constant member function, meaning it cannot modify any member variables of the class.
Constant Objects
Objects of a class can be declared as const to ensure that they cannot be modified.

cpp
Copy code
const MyClass obj;
Any member function called on obj must be a const member function.
Constant References
References can also be declared as const to prevent modification of the referenced value.

cpp
Copy code
const int &ref = x;
ref is a constant reference to an integer, meaning you cannot use ref to change the value of x.
Const with Functions
When dealing with function parameters, const can be used to protect the passed arguments from being modified within the function.

cpp
Copy code
void func(const int &param) {
    // param cannot be modified
}
param is a constant reference to an integer, ensuring that func does not alter the argument passed to it.
Const and Class Data Members
Data members of a class can be declared as const, making them immutable after initialization.

cpp
Copy code
class MyClass {
public:
    MyClass(int val) : value(val) {}
private:
    const int value;
};
value is a constant data member, and it must be initialized using an initializer list in the constructor.
Example Usage
cpp
Copy code
#include <iostream>

class MyClass {
public:
    MyClass(int val) : value(val) {}
    int getValue() const {
        return value;
    }
private:
    const int value;
};

int main() {
    const MyClass obj(42);
    std::cout << obj.getValue() << std::endl;
    return 0;
}
In this example, obj is a constant object of MyClass, and getValue is a constant member function that returns the value of the constant data member value.
By using const appropriately, you can ensure immutability where needed, which helps in 


##########################################################################################################################
Defining a Namespace
In C++, a namespace is a declarative region that provides a scope to the identifiers (names of types, functions, variables, etc.) inside it. Namespaces are used to organize code into logical groups 
and to prevent name collisions that can occur especially when your code base includes multiple libraries.


#note: The method for import Lib in c++
 Method 1: (Common)
    syntax: using namespacce generalLib;
    ex: using namespace std;

 Method 2: 
    syntax: using std::libName; 